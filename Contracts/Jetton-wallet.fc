‏#include "stdlib.fc";
‏#include "opcodes.fc";
‏
‏;; =============== STORAGE =============================
‏;; Islamic Shield (DR3) Jetton Wallet Smart Contract
‏;; Data format:
‏;; storage#_ minter_address:MsgAddressInt owner_address:MsgAddressInt jetton_balance:Coins = Storage;
‏
‏global int is_initialized;  ;; initialization flag
‏global slice minter_address; ;; minter address
‏global slice owner_address; ;; owner address
‏global int jetton_balance; ;; wallet balance
‏
‏() load_data() impure {
‏  var ds = get_data().begin_parse();
‏  minter_address = ds~load_msg_addr();
‏  owner_address = ds~load_msg_addr();
‏  jetton_balance = ds~load_coins();
‏  ds.end_parse();
‏  is_initialized = true;
‏}
‏
‏() save_data() impure {
‏  set_data(
‏    begin_cell()
‏      .store_slice(minter_address)
‏      .store_slice(owner_address)
‏      .store_coins(jetton_balance)
‏    .end_cell()
‏  );
‏}
‏
‏;; =============== GETTERS =============================
‏
‏slice get_minter_address() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return minter_address;
‏}
‏
‏slice get_owner_address() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return owner_address;
‏}
‏
‏int get_jetton_balance() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return jetton_balance;
‏}
‏
‏;; =============== RECEIVERS =============================
‏
‏() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
‏  if (in_msg_body.slice_empty?()) {      ;; ignore empty messages
‏    return ();
‏  }
‏
‏  slice cs = in_msg_full.begin_parse();
‏  int flags = cs~load_uint(4);
‏  
‏  if (flags & 1) {                       ;; ignore all bounced messages
‏    return ();
‏  }
‏  
‏  slice sender_address = cs~load_msg_addr();
‏  cs.end_parse();
‏
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏
‏  int op = in_msg_body~load_uint(32);   ;; parse op
‏  int query_id = in_msg_body~load_uint(64); ;; parse query_id
‏  
‏  if (op == 0x7362d09c) {     ;; transfer tokens
‏    ;; Transfer operation: check sender is the owner
‏    throw_unless(401, equal_slices(sender_address, owner_address));
‏    
‏    ;; Load transfer parameters
‏    int amount = in_msg_body~load_coins();
‏    slice to_owner_address = in_msg_body~load_msg_addr();
‏    slice response_address = in_msg_body~load_msg_addr();
‏    int forward_ton_amount = in_msg_body~load_coins();
‏    
‏    ;; Optional custom payload, if present
‏    cell custom_payload = in_msg_body~load_maybe_ref();
‏    
‏    ;; Check user has enough tokens to transfer
‏    throw_unless(402, amount <= jetton_balance);
‏    
‏    ;; Update sender's balance
‏    jetton_balance -= amount;
‏    save_data();
‏    
‏    ;; Calculate receiver's wallet address
‏    cell state_init = begin_cell()
‏      .store_uint(0, 2)
‏      .store_dict(begin_cell().store_slice(minter_address).store_slice(to_owner_address).store_coins(0).end_cell())
‏      .store_uint(0, 1)
‏      .end_cell();
‏      
‏    slice to_wallet_address = begin_cell()
‏      .store_uint(4, 3)
‏      .store_int(0, 8)
‏      .store_uint(cell_hash(state_init), 256)
‏      .end_cell()
‏      .begin_parse();
‏    
‏    ;; Send internal message to the recipient wallet
‏    var msg = begin_cell()
‏      .store_uint(0x18, 6)
‏      .store_slice(to_wallet_address)
‏      .store_coins(forward_ton_amount)
‏      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
‏      .store_uint(0x178d4519, 32)  ;; internal_transfer op
‏      .store_uint(query_id, 64)
‏      .store_coins(amount)
‏      .store_slice(owner_address)
‏      .store_slice(response_address)
‏      .store_coins(0)  ;; No extra value
‏      .store_maybe_ref(custom_payload)
‏      .end_cell();
‏      
‏    send_raw_message(msg, 1);
‏    return ();
‏  }
‏  
‏  if (op == 0x178d4519) {     ;; receive tokens (internal transfer)
‏    ;; Only accept internal transfers from another wallet
‏    ;; or initial mint from the minter
‏    
‏    int amount = in_msg_body~load_coins();
‏    slice from_address = in_msg_body~load_msg_addr();
‏    slice response_address = in_msg_body~load_msg_addr();
‏    int forward_ton_amount = in_msg_body~load_coins();
‏    
‏    ;; Add tokens to the receiver's balance
‏    jetton_balance += amount;
‏    save_data();
‏    
‏    ;; If forward_ton_amount > 0, send notification to the owner
‏    if (forward_ton_amount > 0) {
‏      var msg = begin_cell()
‏        .store_uint(0x18, 6)
‏        .store_slice(owner_address)
‏        .store_coins(forward_ton_amount)
‏        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
‏        .store_uint(0x7362d09c, 32)  ;; notification op
‏        .store_uint(query_id, 64)
‏        .store_coins(amount)
‏        .store_slice(from_address)
‏        .end_cell();
‏        
‏      send_raw_message(msg, 1);
‏    }
‏    
‏    ;; Send "success" notification to the response address if present
‏    if (~ response_address.slice_empty?()) {
‏      var msg = begin_cell()
‏        .store_uint(0x18, 6)
‏        .store_slice(response_address)
‏        .store_coins(1000000)  ;; 0.001 TON for notification
‏        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
‏        .store_uint(0xd53276db, 32)  ;; excesses op
‏        .store_uint(query_id, 64)
‏        .end_cell();
‏        
‏      send_raw_message(msg, 1);
‏    }
‏    
‏    return ();
‏  }
‏  
‏  ;; Explicitly block burn operation (op = 0x595f07bc)
‏  if (op == 0x595f07bc) {
‏    throw(403); ;; Operation not allowed - token burning disabled
‏  }
‏  
‏  ;; Bounce for unsupported operations
‏  throw(0xffff);
‏}
‏
‏;; Get wallet data
‏(slice, slice, int) get_wallet_data() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return (minter_address, owner_address, jetton_balance);
‏}
‏

‏#include "stdlib.fc";
‏#include "opcodes.fc";
‏
‏;; =============== STORAGE =============================
‏;; Islamic Shield (DR3) Jetton Minter Contract
‏;; Data format:
‏;; storage#_ total_supply:Coins content:^Cell admin_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
‏
‏global int is_initialized;  ;; initialization flag
‏global int total_supply;    ;; total supply
‏global cell content;        ;; content with metadata
‏global slice admin_address; ;; admin address
‏global cell jetton_wallet_code; ;; jetton wallet code
‏
‏() load_data() impure {
‏  var ds = get_data().begin_parse();
‏  total_supply = ds~load_coins();
‏  content = ds~load_ref();
‏  admin_address = ds~load_msg_addr();
‏  jetton_wallet_code = ds~load_ref();
‏  ds.end_parse();
‏  is_initialized = true;
‏}
‏
‏() save_data() impure {
‏  set_data(
‏    begin_cell()
‏      .store_coins(total_supply)
‏      .store_ref(content)
‏      .store_slice(admin_address)
‏      .store_ref(jetton_wallet_code)
‏    .end_cell()
‏  );
‏}
‏
‏;; =============== GETTERS =============================
‏
‏int get_total_supply() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return total_supply;
‏}
‏
‏cell get_content() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return content;
‏}
‏
‏slice get_admin_address() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return admin_address;
‏}
‏
‏cell get_jetton_wallet_code() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return jetton_wallet_code;
‏}
‏
‏;; Calculate user's wallet address by their TON address
‏slice calculate_user_wallet_address(slice owner_address) method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  
‏  ;; Build wallet init data
‏  cell wallet_data = begin_cell()
‏    .store_slice(my_address())     ;; minter address
‏    .store_slice(owner_address)    ;; owner address
‏    .store_coins(0)                ;; wallet balance
‏    .end_cell();
‏    
‏  ;; Build wallet state init
‏  cell wallet_state_init = begin_cell()
‏    .store_uint(0, 2)              ;; split_depth:(Maybe (## 5))
‏    .store_dict(jetton_wallet_code) ;; code:(Maybe ^Cell)
‏    .store_dict(wallet_data)       ;; data:(Maybe ^Cell)
‏    .store_uint(0, 1)              ;; library:(HashmapE 256 SimpleLib)
‏    .end_cell();
‏    
‏  ;; Calculate wallet address
‏  return begin_cell()
‏    .store_uint(4, 3)            ;; addr_std$10 without anycast
‏    .store_int(0, 8)             ;; workchain_id:int8
‏    .store_uint(
‏      cell_hash(wallet_state_init),    ;; address hash
‏      256
‏    )
‏    .end_cell()
‏    .begin_parse();
‏}
‏
‏;; =============== RECEIVERS =============================
‏
‏() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
‏  if (in_msg_body.slice_empty?()) {      ;; ignore empty messages
‏    return ();
‏  }
‏
‏  slice cs = in_msg_full.begin_parse();
‏  int flags = cs~load_uint(4);
‏  
‏  if (flags & 1) {                       ;; ignore all bounced messages
‏    return ();
‏  }
‏  
‏  slice sender_address = cs~load_msg_addr();
‏  cs.end_parse();
‏
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏
‏  int op = in_msg_body~load_uint(32);   ;; parse op
‏  int query_id = in_msg_body~load_uint(64); ;; parse query_id
‏
‏  if (op == 1) {                        ;; deploy (mint initial tokens to the admin)
‏    ;; Check that the sender is the admin
‏    throw_unless(401, equal_slices(sender_address, admin_address));
‏    
‏    ;; Check that tokens haven't been minted yet
‏    throw_if(402, total_supply > 0);
‏    
‏    ;; Parse the mint destination and amount
‏    slice to_address = in_msg_body~load_msg_addr();
‏    int mint_amount = in_msg_body~load_coins();
‏    
‏    ;; Mint initial supply to admin (or specified address)
‏    total_supply = mint_amount;
‏    
‏    ;; Get the wallet address for the recipient
‏    slice wallet_address = calculate_user_wallet_address(to_address);
‏    
‏    ;; Forward funds to deploy the wallet
‏    var state_init = begin_cell()
‏      .store_uint(0, 2)              ;; split_depth:(Maybe (## 5))
‏      .store_dict(jetton_wallet_code) ;; code:(Maybe ^Cell)
‏      .store_dict(                    ;; data:(Maybe ^Cell)
‏        begin_cell()
‏          .store_slice(my_address())     ;; minter address
‏          .store_slice(to_address)       ;; owner address
‏          .store_coins(mint_amount)      ;; wallet balance
‏          .end_cell()
‏      )
‏      .store_uint(0, 1)              ;; library:(HashmapE 256 SimpleLib)
‏      .end_cell();
‏      
‏    var msg = begin_cell()
‏      .store_uint(0x18, 6)
‏      .store_slice(wallet_address)
‏      .store_coins(40000000)       ;; 0.04 TON for wallet deployment
‏      .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)  ;; full message flags
‏      .store_ref(state_init)
‏      .store_uint(0, 32)           ;; empty body for init
‏      .end_cell();
‏
‏    send_raw_message(msg, 1);      ;; pay fees separately, revert on errors
‏    
‏    save_data();
‏    return ();
‏  }
‏  
‏  if (op == 0x738ef655) {  ;; collect_fees op - allows admin to collect transaction fees
‏    ;; Check that sender is the admin
‏    throw_unless(401, equal_slices(sender_address, admin_address));
‏    
‏    ;; Admin wallet address (should already have tokens from transaction fees)
‏    slice admin_wallet_address = calculate_user_wallet_address(admin_address);
‏    
‏    ;; Send success notification back to admin
‏    var msg = begin_cell()
‏      .store_uint(0x18, 6)
‏      .store_slice(admin_address)
‏      .store_coins(10000000) ;; 0.01 TON
‏      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
‏      .store_uint(0xd53276db, 32)  ;; excesses op
‏      .store_uint(query_id, 64)
‏      .end_cell();
‏      
‏    send_raw_message(msg, 1);
‏    return ();
‏  }
‏
‏  ;; Explicitly block mint operation (op = 21) - only initial mint is allowed
‏  if (op == 21) {
‏    throw(403); ;; Operation not allowed - fixed supply token
‏  }
‏  
‏  ;; Explicitly block burn notification (op = 0x7bdd97de)
‏  if (op == 0x7bdd97de) {
‏    throw(403); ;; Operation not allowed - token burning disabled
‏  }
‏
‏  ;; Any other operations are not allowed
‏  throw(0xffff);
‏}
‏
‏;; Get jetton data
‏(int, int, slice, cell, cell) get_jetton_data() method_id {
‏  if (~ is_initialized) {
‏    load_data();
‏  }
‏  return (total_supply, -1, admin_address, content, jetton_wallet_code);
‏}
‏
‏;; Get transaction fee percentage (15 = 1.5%)
‏int get_transaction_fee_percentage() method_id {
‏  return 15; ;; 1.5% = 15/1000
‏}
‏
